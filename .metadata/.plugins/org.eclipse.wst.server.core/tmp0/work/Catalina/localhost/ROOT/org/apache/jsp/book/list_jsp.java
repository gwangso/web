/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.76
 * Generated at: 2023-07-27 23:37:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.book;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class list_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<div class=\"row\">\r\n");
      out.write("	<div class=\"col\">\r\n");
      out.write("		<h1>저장도서목록</h1>\r\n");
      out.write("		<div id=\"div_list\"></div>\r\n");
      out.write("		<div class=\"text-center\">\r\n");
      out.write("			<button id=\"prev\" class=\"btn btn-secondary\">이전</button>\r\n");
      out.write("			<span id=\"now_page\" class=\"mx-3\">1/10</span>\r\n");
      out.write("			<button id=\"next\" class=\"btn btn-secondary\">다음</button>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<!-- handlebars -->\r\n");
      out.write("<script id=\"temp_list\" type=\"text/x-handlebars-template\">\r\n");
      out.write("<table class=\"table align-middle\">\r\n");
      out.write("	<tr class=\"table table-dark\">\r\n");
      out.write("		<td><input type=\"checkbox\" id=\"all\"></td>\r\n");
      out.write("		<td>썸네일</td>\r\n");
      out.write("		<td>제목</td>\r\n");
      out.write("		<td>출판사</td>\r\n");
      out.write("		<td>가격</td>	\r\n");
      out.write("	</tr>\r\n");
      out.write("	{{#each .}}\r\n");
      out.write("	<tr>\r\n");
      out.write("		<td><input type=\"checkbox\" class=\"chk\" book=\"{{toString @this}}\"></td>\r\n");
      out.write("		<td><img src=\"{{printImg thumbnail}}\" width=\"50px\" index={{@index}} style=\"cursor: pointer;\"></td>			\r\n");
      out.write("		<td>{{title}}</td>\r\n");
      out.write("		<td>{{publisher}}</td>\r\n");
      out.write("		<td>{{fmtPrice price}}</td>\r\n");
      out.write("	</tr>\r\n");
      out.write("	{{/each}}	\r\n");
      out.write("</table>\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<!-- 핸들바함수 -->\r\n");
      out.write("<script>\r\n");
      out.write("	Handlebars.registerHelper(\"fmtPrice\", function(price){\r\n");
      out.write("		return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") + \"원\";\r\n");
      out.write("	})\r\n");
      out.write("	\r\n");
      out.write("	Handlebars.registerHelper(\"printImg\",function(image){\r\n");
      out.write("		if(image){\r\n");
      out.write("			return image;\r\n");
      out.write("		}else {\r\n");
      out.write("			return \"http://via.placeholder.com/120x174\";\r\n");
      out.write("		}\r\n");
      out.write("	})\r\n");
      out.write("	\r\n");
      out.write("	Handlebars.registerHelper(\"toString\",function(book){\r\n");
      out.write("		return JSON.stringify(book);\r\n");
      out.write("	})\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("	let nowPage = 1;\r\n");
      out.write("	getList();\r\n");
      out.write("	function getList(){\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			type:\"get\",\r\n");
      out.write("			url:\"/book/list.json\",\r\n");
      out.write("			dataType:\"json\",\r\n");
      out.write("			data: {page:nowPage},\r\n");
      out.write("			success:function(data){\r\n");
      out.write("				const com_temp_list = Handlebars.compile($(\"#temp_list\").html());\r\n");
      out.write("				const html_list = com_temp_list(data);\r\n");
      out.write("				$(\"#div_list\").html(html_list);\r\n");
      out.write("				\r\n");
      out.write("				\r\n");
      out.write("				let total = 0;\r\n");
      out.write("				\r\n");
      out.write("				$.ajax({\r\n");
      out.write("					type:\"get\",\r\n");
      out.write("					url:\"/book/total\",\r\n");
      out.write("					dataType:\"json\",\r\n");
      out.write("					async: false,\r\n");
      out.write("					success:function(data){\r\n");
      out.write("						total = data;\r\n");
      out.write("						console.log(total);\r\n");
      out.write("						return total;\r\n");
      out.write("					}\r\n");
      out.write("				})\r\n");
      out.write("				\r\n");
      out.write("				console.log(total);\r\n");
      out.write("				let lastPage = Math.ceil(total/5);\r\n");
      out.write("				$(\"#now_page\").html(nowPage);\r\n");
      out.write("				\r\n");
      out.write("				if(nowPage==1) $(\"#prev\").attr(\"disabled\",true);\r\n");
      out.write("				else $(\"#prev\").attr(\"disabled\",false);\r\n");
      out.write("				\r\n");
      out.write("				if(nowPage==lastPage) $(\"#next\").attr(\"disabled\",true);\r\n");
      out.write("				else $(\"#next\").attr(\"disabled\",false);\r\n");
      out.write("			}\r\n");
      out.write("		})		\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	$(\"#next\").on(\"click\",function(){\r\n");
      out.write("		nowPage++;\r\n");
      out.write("		getList();\r\n");
      out.write("	})\r\n");
      out.write("	\r\n");
      out.write("	$(\"#prev\").on(\"click\",function(){\r\n");
      out.write("		nowPage--;\r\n");
      out.write("		getList();\r\n");
      out.write("	})\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
